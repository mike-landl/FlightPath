#pragma once 

#include <limits>    

#include <iostream>
#include <sstream>
#include <streambuf>
#include <functional>

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

#include "Vec3.hpp"

/**
 * @brief Checks whether two floating-point values are approximately equal.
 * 
 * This function uses Catch2's WithinRel matcher to assert that the actual value
 * is within a specified number of ULPs (units in the last place) relative to the expected value.
 *
 * @tparam REAL     A floating-point type (e.g., float, double).
 * @param  value    The actual value to check.
 * @param  expected The expected value to compare against.
 * @param  ulps     The number of ULPs (in terms of machine epsilon) allowed as relative tolerance.
 * 
 * @note This function is intended for use in unit tests to validate floating-point results 
 *       with a controlled tolerance.
 */
template <typename REAL>
inline auto CheckReal(const REAL value, const REAL expected, const REAL ulps = REAL(1)) -> void
{
    REQUIRE_THAT(
        value,
        Catch::Matchers::WithinRel(
            expected,
            ulps*std::numeric_limits<REAL>::epsilon()
        )
    );
}

template <typename REAL>
inline auto CheckVec3(const FlightPath::Vec3<REAL> &actual, const FlightPath::Vec3<REAL> &expected) -> void
{
    CheckReal<REAL>(actual.x, expected.x);
    CheckReal<REAL>(actual.y, expected.y);
    CheckReal<REAL>(actual.z, expected.z);
}

/**
 * @brief Captures and returns the output written to std::cout during the execution of a function.
 *
 * This utility function temporarily redirects std::cout to an internal string stream,
 * executes the provided logging function, and then restores the original output buffer.
 * The captured output (including any ANSI color codes or formatting) is returned as a string.
 *
 * @param log_function A callable (e.g., lambda or std::function) that performs logging to std::cout.
 *                     void() means that is has no parameters and returns nothing
 * @return std::string The output generated by the log_function, captured from std::cout.
 *
 * @note This function is useful for testing log output or other console-printing behavior.
 */
inline auto CaptureOutput(const std::function<void()>& log_function) -> std::string
{
    std::ostringstream captured_output;
    std::streambuf* old_buf = std::cout.rdbuf(); // save old buffer
    std::cout.rdbuf(captured_output.rdbuf()); // set buffer to captured_output
    
    log_function();

    std::cout.rdbuf(old_buf); // restore old buffer

    return captured_output.str();
}
