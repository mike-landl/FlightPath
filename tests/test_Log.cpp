#include "Log.hpp"

#include <sstream>
#include <streambuf>
#include <functional>

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

/**
 * @brief Captures and returns the output written to std::cout during the execution of a function.
 *
 * This utility function temporarily redirects std::cout to an internal string stream,
 * executes the provided logging function, and then restores the original output buffer.
 * The captured output (including any ANSI color codes or formatting) is returned as a string.
 *
 * @param log_function A callable (e.g., lambda or std::function) that performs logging to std::cout.
 *                     void() means that is has no parameters and returns nothing
 * @return std::string The output generated by the log_function, captured from std::cout.
 *
 * @note This function is useful for testing log output or other console-printing behavior.
 */
static auto CaptureOutput(const std::function<void()>& log_function) -> std::string
{
    std::ostringstream captured_output;
    std::streambuf* old_buf = std::cout.rdbuf(); // save old buffer
    std::cout.rdbuf(captured_output.rdbuf()); // set buffer to captured_output
    
    log_function();

    std::cout.rdbuf(old_buf); // restore old buffer

    return captured_output.str();
}

TEST_CASE("[Log] Debug works", "[Log]")
{
    // lambda without captures or parameters for passing anonymous inline function
    auto console_output = CaptureOutput([](){FlightPath::Log::Debug("Debug");});
    REQUIRE(console_output == "\x1B[94m[D]\x1B[0m test_Log.cpp:39 Debug\n");
}

TEST_CASE("[Log] Info works", "[Log]")
{
    auto console_output = CaptureOutput([](){FlightPath::Log::Info("Info");});
    REQUIRE(console_output == "\x1B[92m[I]\x1B[0m Info\n");
}

TEST_CASE("[Log] Warn works", "[Log]")
{
    auto console_output = CaptureOutput([](){FlightPath::Log::Warn("Warn");});
    REQUIRE(console_output == "\x1B[93m[W]\x1B[0m test_Log.cpp:51 Warn\n");
}

TEST_CASE("[Log] Error works", "[Log]")
{
    auto console_output = CaptureOutput([](){FlightPath::Log::Error("Error");});
    REQUIRE(console_output == "\x1B[91m[E]\x1B[0m test_Log.cpp:57 Error\n");
}
